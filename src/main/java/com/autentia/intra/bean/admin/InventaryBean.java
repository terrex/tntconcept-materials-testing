/* 
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.  
 *	Copyright (C) 2007 Autentia Real Bussiness Solution S.L.					   
 *	
 * 	This program is free software; you can redistribute it and/or
 * 	modify it under the terms of the GNU General Public License
 * 	as published by the Free Software Foundation; either version 2
 * 	of the License, or (at your option) any later version.
 *
 * 	This program is distributed in the hope that it will be useful,
 * 	but WITHOUT ANY WARRANTY; without even the implied warranty of
 * 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * 	GNU General Public License for more details.
 *
 * 	You should have received a copy of the GNU General Public License
 * 	along with this program; if not, write to the Free Software
 * 	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * 	Autentia Real Bussiness Solution S.L.
 * 	Tlf: +34 91 675 33 06, +34 655 99 11 72
 * 	Fax: +34 91 656 65 04
 * 	info@autentia.com																
 */
package com.autentia.intra.bean.admin;

import com.autentia.intra.bean.BaseBean;
import com.autentia.intra.bean.NavigationResults;
import com.autentia.intra.businessobject.Inventary;
import com.autentia.intra.businessobject.InventaryType;
import com.autentia.intra.businessobject.User;
import com.autentia.intra.dao.SortCriteria;
import com.autentia.intra.dao.search.InventarySearch;
import com.autentia.intra.manager.admin.InventaryManager;
import com.autentia.intra.manager.admin.UserManager;
import com.autentia.intra.manager.security.Permission;
import com.autentia.intra.upload.Uploader;
import com.autentia.intra.upload.UploaderFactory;
import com.autentia.intra.util.FacesUtils;
import com.autentia.intra.util.SpringUtils;
import org.acegisecurity.acls.domain.BasePermission;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.faces.model.SelectItem;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * UI bean for Inventary objects.
 *
 * @author stajanov code generator
 */
public class InventaryBean extends BaseBean {
    /**
     * Serial version field
     */
    private static final long serialVersionUID = -1L;

/* inventary - generated by stajanov (do not edit/delete) */


    /**
     * Logger
     */
    private static final Log log = LogFactory.getLog(InventaryBean.class);

    /**
     * Active search object
     */
    private InventarySearch search = new InventarySearch();

    /**
     * Manager
     */
    private static InventaryManager manager = InventaryManager.getDefault();

    /**
     * Upload service
     */
    private static final Uploader uploader = UploaderFactory.getInstance("inventary");


    /**
     * Active Inventary object
     */
    private Inventary inventary;

    /**
     * Default sort column
     */
    private String sortColumn = "description";

    /**
     * Default sort order
     */
    private boolean sortAscending = true;


    /**
     * List inventarys. Order depends on Faces parameter sort.
     *
     * @return the list of all inventarys sorted by requested criterion
     */
    public List<Inventary> getAll() {
        return manager.getAllEntities(search, new SortCriteria(sortColumn, sortAscending));
    }

    // Getters to list possible values of related entities


    /**
     * Get the list of all assignedTos
     *
     * @return the list of all assignedTos
     */
    public List<SelectItem> getAssignedTos() {
        List<User> refs = UserManager.getDefault().getAllEntities(null, new SortCriteria("name"));

        ArrayList<SelectItem> ret = new ArrayList<SelectItem>();
        for (User ref : refs) {
            ret.add(new SelectItem(ref, ref.getName()));
        }
        return ret;
    }

    // Getters to list possible values of enum fields

    public String getTypeFormatted() {
        if (this.getType() != null) {
            return FacesUtils.formatMessage("InventaryType." + this.getType().name());
        } else {
            return "";
        }
    }

    /**
     * Get the list of all Type values
     *
     * @return the list of all Type values
     */
    public List<SelectItem> getTypes() {
        ArrayList<SelectItem> ret = new ArrayList<SelectItem>();
        InventaryType[] vals = InventaryType.values();
        for (InventaryType val : vals) {
            ret.add(new SelectItem(val, FacesUtils.formatMessage("InventaryType." + val.name())));
        }
        return ret;
    }

    // Methods to create/remove instances of one-to-many entities (slave entities)

    /**
     * Whether or not create button is available for user
     *
     * @return true if user can create objects of type Inventary
     */
    public boolean isCreateAvailable() {
        return SpringUtils.isRolePermissionGranted(Permission.Entity_Create(Inventary.class));
    }

    /**
     * Whether or not edit button is available for user
     *
     * @return true if user can edit current object
     */
    public boolean isEditAvailable() {
        return SpringUtils.isAclPermissionGranted(inventary, BasePermission.WRITE);
    }

    /**
     * Whether or not delete button is available for user
     *
     * @return true if user can delete current object
     */
    public boolean isDeleteAvailable() {
        return (inventary.getId() != null) &&
                SpringUtils.isAclPermissionGranted(inventary, BasePermission.DELETE);
    }

    /**
     * Go to create page
     *
     * @return forward to CREATE page
     */
    public String create() {
        inventary = new Inventary();
        inventary.setCost(new BigDecimal(0));
        return NavigationResults.CREATE;
    }

    /**
     * Go to detail page
     *
     * @return forward to DETAIL page
     */
    public String detail() {
        Integer id = Integer.parseInt(FacesUtils.getRequestParameter("id"));
        inventary = manager.getEntityById(id);

        return SpringUtils.isAclPermissionGranted(inventary, BasePermission.WRITE)
                ? NavigationResults.EDIT
                : NavigationResults.DETAIL;
    }

    /**
     * Save bean and stay on it
     *
     * @return forward to list page
     */
    public String save() {

        doBeforeSave();

        if (inventary.getId() == null) {
            manager.insertEntity(inventary);
        } else {
            manager.updateEntity(inventary);
        }

        // Calls an after save action
        String result = doAfterSave(NavigationResults.LIST);

        // Unselect object
        //inventary = null;

        return null;
    }

    /**
     * Delete bean and go back to beans list
     *
     * @return forward to LIST page
     */
    public String delete() {
        manager.deleteEntity(inventary);
        inventary = null;
        return NavigationResults.LIST;
    }

    /**
     * Go back to beans list
     *
     * @return forward to LIST page
     */
    public String list() {
        return NavigationResults.LIST;
    }

    /**
     * Reset search criteria
     *
     * @return forward to LIST page
     */
    public String reset() {
        search.reset();
        return list();
    }

    /**
     * Go to search page
     *
     * @return forward to SEARCH page
     */
    public String search() {
        return NavigationResults.SEARCH;
    }

    /**
     * Check if we have an active object.
     *
     * @return true is an object is selected
     */
    public boolean isInventarySelected() {
        return inventary != null;
    }

    // Getters and setters to manipulate sorting
    public boolean isSortAscending() {
        return sortAscending;
    }

    public void setSortAscending(boolean sortAscending) {
        this.sortAscending = sortAscending;
    }

    public String getSortColumn() {
        return sortColumn;
    }

    public void setSortColumn(String sortColumn) {
        this.sortColumn = sortColumn;
    }

    // Getters and setters to handle search
    public InventarySearch getSearch() {
        return search;
    }


    public Date getSearchStartBuyDate() {
        return search.getStartBuyDate();
    }

    public void setSearchStartBuyDate(Date val) {
        if (val != null) {
            search.setStartBuyDate(val);
        } else {
            search.unsetStartBuyDate();
        }
    }

    public boolean isSearchStartBuyDateValid() {
        return search.isStartBuyDateSet();
    }

    public void setSearchStartBuyDateValid(boolean val) {
        if (val) {
            search.setStartBuyDate(search.getStartBuyDate());
        } else {
            search.unsetStartBuyDate();
        }
    }

    public Date getSearchEndBuyDate() {
        return search.getEndBuyDate();
    }

    public void setSearchEndBuyDate(Date val) {
        if (val != null) {
            search.setEndBuyDate(val);
        } else {
            search.unsetEndBuyDate();
        }
    }

    public boolean isSearchEndBuyDateValid() {
        return search.isEndBuyDateSet();
    }

    public void setSearchEndBuyDateValid(boolean val) {
        if (val) {
            search.setEndBuyDate(search.getEndBuyDate());
        } else {
            search.unsetEndBuyDate();
        }
    }


    public java.lang.Boolean getSearchRenting() {
        return search.getRenting();
    }

    public void setSearchRenting(java.lang.Boolean val) {
        if (search.isRentingSet()) {
            search.setRenting(val);
        }
    }

    public boolean isSearchRentingValid() {
        return search.isRentingSet();
    }

    public void setSearchRentingValid(boolean val) {
        if (val) {
            search.setRenting(search.getRenting());
        } else {
            search.unsetRenting();
        }
    }


    public BigDecimal getSearchStartCost() {
        return search.getStartCost();
    }

    public void setSearchStartCost(BigDecimal val) {
        if (val != null) {
            search.setStartCost(val);
        } else {
            search.unsetStartCost();
        }
    }

    public boolean isSearchStartCostValid() {
        return search.isStartCostSet();
    }

    public void setSearchStartCostValid(boolean val) {
        if (val) {
            search.setStartCost(search.getStartCost());
        } else {
            search.unsetStartCost();
        }
    }

    public BigDecimal getSearchEndCost() {
        return search.getEndCost();
    }

    public void setSearchEndCost(BigDecimal val) {
        if (val != null) {
            search.setEndCost(val);
        } else {
            search.unsetEndCost();
        }
    }

    public boolean isSearchEndCostValid() {
        return search.isEndCostSet();
    }

    public void setSearchEndCostValid(boolean val) {
        if (val) {
            search.setEndCost(search.getEndCost());
        } else {
            search.unsetEndCost();
        }
    }


    public java.lang.Boolean getSearchAmortizable() {
        return search.getAmortizable();
    }

    public void setSearchAmortizable(java.lang.Boolean val) {
        if (search.isAmortizableSet()) {
            search.setAmortizable(val);
        }
    }

    public boolean isSearchAmortizableValid() {
        return search.isAmortizableSet();
    }

    public void setSearchAmortizableValid(boolean val) {
        if (val) {
            search.setAmortizable(search.getAmortizable());
        } else {
            search.unsetAmortizable();
        }
    }


    public String getSearchSerialNumber() {
        return search.getSerialNumber();
    }

    public void setSearchSerialNumber(String val) {
        if (search.isSerialNumberSet()) {
            search.setSerialNumber(val);
        }
    }

    public boolean isSearchSerialNumberValid() {
        return search.isSerialNumberSet();
    }

    public void setSearchSerialNumberValid(boolean val) {
        if (val) {
            search.setSerialNumber(search.getSerialNumber());
        } else {
            search.unsetSerialNumber();
        }
    }


    public String getSearchProvider() {
        return search.getProvider();
    }

    public void setSearchProvider(String val) {
        if (search.isProviderSet()) {
            search.setProvider(val);
        }
    }

    public boolean isSearchProviderValid() {
        return search.isProviderSet();
    }

    public void setSearchProviderValid(boolean val) {
        if (val) {
            search.setProvider(search.getProvider());
        } else {
            search.unsetProvider();
        }
    }


    public String getSearchTrademark() {
        return search.getTrademark();
    }

    public void setSearchTrademark(String val) {
        if (search.isTrademarkSet()) {
            search.setTrademark(val);
        }
    }

    public boolean isSearchTrademarkValid() {
        return search.isTrademarkSet();
    }

    public void setSearchTrademarkValid(boolean val) {
        if (val) {
            search.setTrademark(search.getTrademark());
        } else {
            search.unsetTrademark();
        }
    }


    public String getSearchModel() {
        return search.getModel();
    }

    public void setSearchModel(String val) {
        if (search.isModelSet()) {
            search.setModel(val);
        }
    }

    public boolean isSearchModelValid() {
        return search.isModelSet();
    }

    public void setSearchModelValid(boolean val) {
        if (val) {
            search.setModel(search.getModel());
        } else {
            search.unsetModel();
        }
    }


    public String getSearchSpeed() {
        return search.getSpeed();
    }

    public void setSearchSpeed(String val) {
        if (search.isSpeedSet()) {
            search.setSpeed(val);
        }
    }

    public boolean isSearchSpeedValid() {
        return search.isSpeedSet();
    }

    public void setSearchSpeedValid(boolean val) {
        if (val) {
            search.setSpeed(search.getSpeed());
        } else {
            search.unsetSpeed();
        }
    }


    public String getSearchStorage() {
        return search.getStorage();
    }

    public void setSearchStorage(String val) {
        if (search.isStorageSet()) {
            search.setStorage(val);
        }
    }

    public boolean isSearchStorageValid() {
        return search.isStorageSet();
    }

    public void setSearchStorageValid(boolean val) {
        if (val) {
            search.setStorage(search.getStorage());
        } else {
            search.unsetStorage();
        }
    }


    public String getSearchRam() {
        return search.getRam();
    }

    public void setSearchRam(String val) {
        if (search.isRamSet()) {
            search.setRam(val);
        }
    }

    public boolean isSearchRamValid() {
        return search.isRamSet();
    }

    public void setSearchRamValid(boolean val) {
        if (val) {
            search.setRam(search.getRam());
        } else {
            search.unsetRam();
        }
    }


    public String getSearchLocation() {
        return search.getLocation();
    }

    public void setSearchLocation(String val) {
        if (search.isLocationSet()) {
            search.setLocation(val);
        }
    }

    public boolean isSearchLocationValid() {
        return search.isLocationSet();
    }

    public void setSearchLocationValid(boolean val) {
        if (val) {
            search.setLocation(search.getLocation());
        } else {
            search.unsetLocation();
        }
    }


    public String getSearchDescription() {
        return search.getDescription();
    }

    public void setSearchDescription(String val) {
        if (search.isDescriptionSet()) {
            search.setDescription(val);
        }
    }

    public boolean isSearchDescriptionValid() {
        return search.isDescriptionSet();
    }

    public void setSearchDescriptionValid(boolean val) {
        if (val) {
            search.setDescription(search.getDescription());
        } else {
            search.unsetDescription();
        }
    }


    public InventaryType getSearchType() {
        return search.getType();
    }

    public void setSearchType(InventaryType val) {
        if (search.isTypeSet()) {
            search.setType(val);
        }
    }

    public boolean isSearchTypeValid() {
        return search.isTypeSet();
    }

    public void setSearchTypeValid(boolean val) {
        if (val) {
            search.setType(search.getType());
        } else {
            search.unsetType();
        }
    }


    public Integer getSearchOwnerId() {
        return search.getOwnerId();
    }

    public void setSearchOwnerId(Integer val) {
        if (search.isOwnerIdSet()) {
            search.setOwnerId(val);
        }
    }

    public boolean isSearchOwnerIdValid() {
        return search.isOwnerIdSet();
    }

    public void setSearchOwnerIdValid(boolean val) {
        if (val) {
            search.setOwnerId(search.getOwnerId());
        } else {
            search.unsetOwnerId();
        }
    }


    public Integer getSearchDepartmentId() {
        return search.getDepartmentId();
    }

    public void setSearchDepartmentId(Integer val) {
        if (search.isDepartmentIdSet()) {
            search.setDepartmentId(val);
        }
    }

    public boolean isSearchDepartmentIdValid() {
        return search.isDepartmentIdSet();
    }

    public void setSearchDepartmentIdValid(boolean val) {
        if (val) {
            search.setDepartmentId(search.getDepartmentId());
        } else {
            search.unsetDepartmentId();
        }
    }


    public Date getSearchStartInsertDate() {
        return search.getStartInsertDate();
    }

    public void setSearchStartInsertDate(Date val) {
        if (val != null) {
            search.setStartInsertDate(val);
        } else {
            search.unsetStartInsertDate();
        }
    }

    public boolean isSearchStartInsertDateValid() {
        return search.isStartInsertDateSet();
    }

    public void setSearchStartInsertDateValid(boolean val) {
        if (val) {
            search.setStartInsertDate(search.getStartInsertDate());
        } else {
            search.unsetStartInsertDate();
        }
    }

    public Date getSearchEndInsertDate() {
        return search.getEndInsertDate();
    }

    public void setSearchEndInsertDate(Date val) {
        if (val != null) {
            search.setEndInsertDate(val);
        } else {
            search.unsetEndInsertDate();
        }
    }

    public boolean isSearchEndInsertDateValid() {
        return search.isEndInsertDateSet();
    }

    public void setSearchEndInsertDateValid(boolean val) {
        if (val) {
            search.setEndInsertDate(search.getEndInsertDate());
        } else {
            search.unsetEndInsertDate();
        }
    }


    public Date getSearchStartUpdateDate() {
        return search.getStartUpdateDate();
    }

    public void setSearchStartUpdateDate(Date val) {
        if (val != null) {
            search.setStartUpdateDate(val);
        } else {
            search.unsetStartUpdateDate();
        }
    }

    public boolean isSearchStartUpdateDateValid() {
        return search.isStartUpdateDateSet();
    }

    public void setSearchStartUpdateDateValid(boolean val) {
        if (val) {
            search.setStartUpdateDate(search.getStartUpdateDate());
        } else {
            search.unsetStartUpdateDate();
        }
    }

    public Date getSearchEndUpdateDate() {
        return search.getEndUpdateDate();
    }

    public void setSearchEndUpdateDate(Date val) {
        if (val != null) {
            search.setEndUpdateDate(val);
        } else {
            search.unsetEndUpdateDate();
        }
    }

    public boolean isSearchEndUpdateDateValid() {
        return search.isEndUpdateDateSet();
    }

    public void setSearchEndUpdateDateValid(boolean val) {
        if (val) {
            search.setEndUpdateDate(search.getEndUpdateDate());
        } else {
            search.unsetEndUpdateDate();
        }
    }


    public User getSearchAssignedTo() {
        return search.getAssignedTo();
    }

    public void setSearchAssignedTo(User val) {
        if (search.isAssignedToSet()) {
            search.setAssignedTo(val);
        }
    }

    public boolean isSearchAssignedToValid() {
        return search.isAssignedToSet();
    }

    public void setSearchAssignedToValid(boolean val) {
        if (val) {
            search.setAssignedTo(search.getAssignedTo());
        } else {
            search.unsetAssignedTo();
        }
    }

    // Getters and setters to handle uploads

    // Getters and setters to manipulate active Inventary object

    public java.lang.Integer getId() {
        return inventary.getId();
    }


    public Date getBuyDate() {
        return inventary.getBuyDate();
    }

    public void setBuyDate(Date buyDate) {
        inventary.setBuyDate(buyDate);
    }


    public boolean isRenting() {
        return inventary.isRenting();
    }

    public void setRenting(boolean renting) {
        inventary.setRenting(renting);
    }


    public BigDecimal getCost() {
        return inventary.getCost();
    }

    public void setCost(BigDecimal cost) {
        inventary.setCost(cost);
    }


    public boolean isAmortizable() {
        return inventary.isAmortizable();
    }

    public void setAmortizable(boolean amortizable) {
        inventary.setAmortizable(amortizable);
    }


    public String getSerialNumber() {
        return inventary.getSerialNumber();
    }

    public void setSerialNumber(String serialNumber) {
        inventary.setSerialNumber(serialNumber);
    }


    public String getProvider() {
        return inventary.getProvider();
    }

    public void setProvider(String provider) {
        inventary.setProvider(provider);
    }


    public String getTrademark() {
        return inventary.getTrademark();
    }

    public void setTrademark(String trademark) {
        inventary.setTrademark(trademark);
    }


    public String getModel() {
        return inventary.getModel();
    }

    public void setModel(String model) {
        inventary.setModel(model);
    }


    public String getSpeed() {
        return inventary.getSpeed();
    }

    public void setSpeed(String speed) {
        inventary.setSpeed(speed);
    }


    public String getStorage() {
        return inventary.getStorage();
    }

    public void setStorage(String storage) {
        inventary.setStorage(storage);
    }


    public String getRam() {
        return inventary.getRam();
    }

    public void setRam(String ram) {
        inventary.setRam(ram);
    }


    public String getLocation() {
        return inventary.getLocation();
    }

    public void setLocation(String location) {
        inventary.setLocation(location);
    }


    public String getDescription() {
        return inventary.getDescription();
    }

    public void setDescription(String description) {
        inventary.setDescription(description);
    }


    public InventaryType getType() {
        return inventary.getType();
    }

    public void setType(InventaryType type) {
        inventary.setType(type);
    }


    public Integer getOwnerId() {
        return inventary.getOwnerId();
    }

    public void setOwnerId(Integer ownerId) {
        inventary.setOwnerId(ownerId);
    }


    public Integer getDepartmentId() {
        return inventary.getDepartmentId();
    }

    public void setDepartmentId(Integer departmentId) {
        inventary.setDepartmentId(departmentId);
    }


    public Date getInsertDate() {
        return inventary.getInsertDate();
    }

    public void setInsertDate(Date insertDate) {
        inventary.setInsertDate(insertDate);
    }


    public Date getUpdateDate() {
        return inventary.getUpdateDate();
    }

    public void setUpdateDate(Date updateDate) {
        inventary.setUpdateDate(updateDate);
    }


    public User getAssignedTo() {
        return inventary.getAssignedTo();
    }

    public void setAssignedTo(User assignedTo) {
        inventary.setAssignedTo(assignedTo);
    }

/* inventary - generated by stajanov (do not edit/delete) */
}
