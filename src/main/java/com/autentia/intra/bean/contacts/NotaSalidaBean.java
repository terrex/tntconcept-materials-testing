package com.autentia.intra.bean.contacts;

import com.autentia.intra.bean.BaseBean;
import com.autentia.intra.bean.NavigationResults;
import com.autentia.intra.businessobject.*;
import com.autentia.intra.dao.SortCriteria;
import com.autentia.intra.dao.hibernate.NotaSalidaDAO;
import com.autentia.intra.dao.hibernate.OrganizationDAO;
import com.autentia.intra.dao.hibernate.ProjectEnsayoDAO;
import com.autentia.intra.dao.search.NotaSalidaSearch;
import com.autentia.intra.dao.search.ProjectEnsayoSearch;
import com.autentia.intra.dao.search.ProjectSearch;
import com.autentia.intra.manager.admin.ProjectManager;
import com.autentia.intra.manager.contacts.NotaSalidaManager;
import com.autentia.intra.manager.contacts.OrganizationManager;
import com.autentia.intra.manager.security.Permission;
import com.autentia.intra.upload.Uploader;
import com.autentia.intra.upload.UploaderFactory;
import com.autentia.intra.util.ConfigurationUtil;
import com.autentia.intra.util.FacesUtils;
import com.autentia.intra.util.HibernateUtil;
import com.autentia.intra.util.SpringUtils;
import org.acegisecurity.acls.domain.BasePermission;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UIData;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.faces.validator.ValidatorException;
import java.text.NumberFormat;
import java.util.*;


/**
 * UI bean for NotaSalida objects.
 *
 * @author terrex
 */
public class NotaSalidaBean extends BaseBean {

    private NotaSalidaDAO notaSalidaDAO = NotaSalidaDAO.getDefault();
    private OrganizationDAO organizationDAO = OrganizationDAO.getDefault();

    public void nameValidate(FacesContext context,
                             UIComponent toValidate,
                             Object value) throws ValidatorException {
        if (value == null)
            return;

        String name = (String) value;

        NotaSalidaSearch notaSalidaSearch = new NotaSalidaSearch();
        notaSalidaSearch.setName(name);
        HibernateUtil.currentSession().setFlushMode(org.hibernate.FlushMode.MANUAL);
        List<NotaSalida> notaSalidas = notaSalidaDAO.search(notaSalidaSearch, null);
        HibernateUtil.currentSession().setFlushMode(org.hibernate.FlushMode.AUTO);
        ArrayList<NotaSalida> este = new ArrayList<NotaSalida>();
        este.add(notaSalida);

        if (notaSalidas == null || notaSalidas.isEmpty() || notaSalidas.equals(este))
            return;

        throw new ValidatorException(new FacesMessage("Ya existe otra nota de salida con este n√∫mero"));
    }

    public String siguienteNumero() {
        int maximo = 0;
        NumberFormat nf = NumberFormat.getInstance();
        nf.setMinimumIntegerDigits(2);
        String regex = "NS\\d+/";
        String anio = nf.format(new Date().getYear() - 100);
        regex = regex.concat(anio);
        List<NotaSalida> list = notaSalidaDAO.search(null);
        for (NotaSalida o : list) {
            String numero = o.getName();
            if (numero != null && numero.matches(regex)) {
                int x = Integer.parseInt(numero.substring(2, numero.indexOf('/')));
                if (x > maximo)
                    maximo = x;
            }
        }
        nf.setMinimumIntegerDigits(3);
        return "NS".concat(nf.format(maximo + 1)).concat("/").concat(anio);
    }

    /**
     * Serial version field
     */
    private static final long serialVersionUID = -1L;

/* notaSalida - generated by stajanov (do not edit/delete) */

    /**
     * Logger
     */
    private static final Log log = LogFactory.getLog(NotaSalidaBean.class);

    /**
     * Active search object
     */
    private NotaSalidaSearch search = new NotaSalidaSearch();

    /**
     * Manager
     */
    private static NotaSalidaManager manager = NotaSalidaManager.getDefault();

    /**
     * Upload service
     */
    private static final Uploader uploader = UploaderFactory.getInstance("notaSalida");


    /**
     * Active NotaSalida object
     */
    private NotaSalida notaSalida;

    /**
     * Default sort column
     */
    private String sortColumn = "name";

    /**
     * Default sort order
     */
    private boolean sortAscending = true;

    /**
     * Quick search letter for ABC pager control
     */
    private Character letter;

    /**
     * List notaSalidas. Order depends on Faces parameter sort.
     *
     * @return the list of all notaSalidas sorted by requested criterion
     */
    public List<NotaSalida> getAll() {
        return manager.getAllEntities(search, new SortCriteria(sortColumn, sortAscending));
    }

    // Getters to list possible values of related entities

    // Getters to list possible values of enum fields

    // Methods to create/remove instances of one-to-many entities (slave entities)


    /**
     * Whether or not create button is available for user
     *
     * @return true if user can create objects of type NotaSalida
     */
    public boolean isCreateAvailable() {
        return SpringUtils.isRolePermissionGranted(Permission.Entity_Create(NotaSalida.class));
    }

    /**
     * Whether or not edit button is available for user
     *
     * @return true if user can edit current object
     */
    public boolean isEditAvailable() {
        return SpringUtils.isAclPermissionGranted(notaSalida, BasePermission.WRITE);
    }

    /**
     * Whether or not delete button is available for user
     *
     * @return true if user can delete current object
     */
    public boolean isDeleteAvailable() {
        return (notaSalida.getId() != null) &&
                SpringUtils.isAclPermissionGranted(notaSalida, BasePermission.DELETE);
    }

    /**
     * Reset search criteria
     *
     * @return forward to LIST page
     */
    public String reset() {
        search.reset();
        return list();
    }

    /**
     * Go to create page
     *
     * @return forward to CREATE page
     */
    public String create() {
        notaSalida = new NotaSalida();
        notaSalida.setName(siguienteNumero());
        notaSalida.setFecha(new Date());
        notaSalida.setPeticionario(organizationDAO.getById(ConfigurationUtil.getDefault().getIdOurCompany()));
        return NavigationResults.CREATE;
    }

    /**
     * Go to detail page
     *
     * @return forward to DETAIL page
     */
    public String detail() {
        Integer id = Integer.parseInt(FacesUtils.getRequestParameter("id"));
        notaSalida = manager.getEntityById(id);
        projects = null;

        return SpringUtils.isAclPermissionGranted(notaSalida, BasePermission.WRITE)
                ? NavigationResults.EDIT
                : NavigationResults.DETAIL;
    }

    /**
     * Save bean and stay on it
     *
     * @return forward to list page
     */
    public String save() {

        doBeforeSave();

        if (notaSalida.getId() == null) {
            manager.insertEntity(notaSalida);
        } else {
            manager.updateEntity(notaSalida);
        }

        // Calls an after save action
        String result = doAfterSave(NavigationResults.LIST);

        // Unselect object
        //notaSalida = null;

        return null;
    }

    /**
     * Delete bean and go back to beans list
     *
     * @return forward to LIST page
     */
    public String delete() {
        manager.deleteEntity(notaSalida);
        notaSalida = null;
        return NavigationResults.LIST;
    }

    public boolean isPuedoBorrar() {
        return notaSalida != null
                && (notaSalida.getProjectEnsayos() == null
                || notaSalida.getProjectEnsayos().isEmpty());
    }

    /**
     * Go back to beans list
     *
     * @return forward to LIST page
     */
    public String list() {
        projects = null;
        return NavigationResults.LIST;
    }

    /**
     * Go to search page
     *
     * @return forward to SEARCH page
     */
    public String search() {
        return NavigationResults.SEARCH;
    }

    /**
     * Check if we have an active object.
     *
     * @return true is an object is selected
     */
    public boolean isNotaSalidaSelected() {
        return notaSalida != null;
    }

    // Getters and setters to manipulate sorting
    public boolean isSortAscending() {
        return sortAscending;
    }

    public void setSortAscending(boolean sortAscending) {
        this.sortAscending = sortAscending;
    }

    public String getSortColumn() {
        return sortColumn;
    }

    public void setSortColumn(String sortColumn) {
        this.sortColumn = sortColumn;
    }

    // Getters and setters to handle search
    public NotaSalidaSearch getSearch() {
        return search;
    }


    public Set<ProjectEnsayo> getSearchProjectEnsayos() {
        return search.getProjectEnsayos();
    }

    public void setSearchProjectsEnsayos(Set<ProjectEnsayo> val) {
        if (search.isProjectEnsayosSet()) {
            search.setProjectEnsayos(val);
        }
    }

    public boolean isSearchProjectsValid() {
        return search.isProjectEnsayosSet();
    }

    public void setSearchProjectsEnsayosValid(boolean val) {
        if (val) {
            search.setProjectEnsayos(search.getProjectEnsayos());
        } else {
            search.unsetProjectEnsayos();
        }
    }

    public Date getSearchStartInsertDate() {
        return search.getStartInsertDate();
    }

    public void setSearchStartInsertDate(Date val) {
        if (search.isStartInsertDateSet()) {
            search.setStartInsertDate(val);
        }
    }

    public boolean isSearchStartInsertDateValid() {
        return search.isStartInsertDateSet();
    }

    public void setSearchStartInsertDateValid(boolean val) {
        if (val) {
            search.setStartInsertDate(search.getStartInsertDate());
        } else {
            search.unsetStartInsertDate();
        }
    }

    public Date getSearchEndInsertDate() {
        return search.getEndInsertDate();
    }

    public void setSearchEndInsertDate(Date val) {
        if (search.isEndInsertDateSet()) {
            search.setEndInsertDate(val);
        }
    }

    public boolean isSearchEndInsertDateValid() {
        return search.isEndInsertDateSet();
    }

    public void setSearchEndInsertDateValid(boolean val) {
        if (val) {
            search.setEndInsertDate(search.getEndInsertDate());
        } else {
            search.unsetEndInsertDate();
        }
    }

    public Integer getSearchDepartmentId() {
        return search.getDepartmentId();
    }

    public void setSearchDepartmentId(Integer val) {
        if (search.isDepartmentIdSet()) {
            search.setDepartmentId(val);
        }
    }

    public boolean isSearchDepartmentIdValid() {
        return search.isDepartmentIdSet();
    }

    public void setSearchDepartmentIdValid(boolean val) {
        if (val) {
            search.setDepartmentId(search.getDepartmentId());
        } else {
            search.unsetDepartmentId();
        }
    }

    public Date getSearchStartUpdateDate() {
        return search.getStartUpdateDate();
    }

    public void setSearchStartUpdateDate(Date val) {
        if (search.isStartUpdateDateSet()) {
            search.setStartUpdateDate(val);
        }
    }

    public boolean isSearchStartUpdateDateValid() {
        return search.isStartUpdateDateSet();
    }

    public void setSearchStartUpdateDateValid(boolean val) {
        if (val) {
            search.setStartUpdateDate(search.getStartUpdateDate());
        } else {
            search.unsetStartUpdateDate();
        }
    }

    public Date getSearchEndUpdateDate() {
        return search.getEndUpdateDate();
    }

    public void setSearchEndUpdateDate(Date val) {
        if (search.isEndUpdateDateSet()) {
            search.setEndUpdateDate(val);
        }
    }

    public boolean isSearchEndUpdateDateValid() {
        return search.isEndUpdateDateSet();
    }

    public void setSearchEndUpdateDateValid(boolean val) {
        if (val) {
            search.setEndUpdateDate(search.getEndUpdateDate());
        } else {
            search.unsetEndUpdateDate();
        }
    }

    public String getSearchName() {
        return search.getName();
    }

    public void setSearchName(String val) {
        if (search.isNameSet()) {
            search.setName(val);
        }
    }

    public boolean isSearchNameValid() {
        return search.isNameSet();
    }

    public void setSearchNameValid(boolean val) {
        if (val) {
            search.setName(search.getName());
        } else {
            search.unsetName();
        }
    }

    public Date getSearchStartFecha() {
        return search.getStartFecha();
    }

    public void setSearchStartFecha(Date val) {
        if (search.isStartFechaSet()) {
            search.setStartFecha(val);
        }
    }

    public boolean isSearchStartFechaValid() {
        return search.isStartFechaSet();
    }

    public void setSearchStartFechaValid(boolean val) {
        if (val) {
            search.setStartFecha(search.getStartFecha());
        } else {
            search.unsetStartFecha();
        }
    }

    public Date getSearchEndFecha() {
        return search.getEndFecha();
    }

    public void setSearchEndFecha(Date val) {
        if (search.isEndFechaSet()) {
            search.setEndFecha(val);
        }
    }

    public boolean isSearchEndFechaValid() {
        return search.isEndFechaSet();
    }

    public void setSearchEndFechaValid(boolean val) {
        if (val) {
            search.setEndFecha(search.getEndFecha());
        } else {
            search.unsetEndFecha();
        }
    }

    public Integer getSearchOwnerId() {
        return search.getOwnerId();
    }

    public void setSearchOwnerId(Integer val) {
        if (search.isOwnerIdSet()) {
            search.setOwnerId(val);
        }
    }

    public boolean isSearchOwnerIdValid() {
        return search.isOwnerIdSet();
    }

    public void setSearchOwnerIdValid(boolean val) {
        if (val) {
            search.setOwnerId(search.getOwnerId());
        } else {
            search.unsetOwnerId();
        }
    }


    /**
     * Handle an ABC pager letter click: filter objects by specified starting letter
     */
    public void letterClicked() {
        if (letter != null) {
            UIComponent comp = FacesUtils.getComponent("notaSalidas:list");
            HtmlDataTable tabla = (HtmlDataTable) comp;
            tabla.setFirst(0);

            search.setName(letter + "%");
        } else {
            search.unsetName();
        }
    }

    public Character getLetter() {
        return letter;
    }

    public void setLetter(Character letter) {
        this.letter = letter;
    }

    // Getters and setters to handle uploads

    // Getters and setters to manipulate active NotaSalida object


    public void setProjectEnsayos(Set<ProjectEnsayo> projectEnsayos) {
        notaSalida.setProjectEnsayos(projectEnsayos);
    }

    public Set<ProjectEnsayo> getProjectEnsayos() {
        return getNotaSalida().getProjectEnsayos();
    }

    public void setProjectEnsayosLista(List<ProjectEnsayo> projectEnsayos) {
        notaSalida.setProjectEnsayos(new HashSet<ProjectEnsayo>(projectEnsayos));
    }

    public List<ProjectEnsayo> getProjectsEnsayosLista() {
        return new ArrayList<ProjectEnsayo>(notaSalida.getProjectEnsayos());
    }

    class comparaProyectEnsayos implements Comparator<ProjectEnsayo> {
        public int compare(ProjectEnsayo o1, ProjectEnsayo o2) {
            return o1.getNameDescriptivo().compareTo(o2.getNameDescriptivo());
        }
    }

    public void seleccionfoItem(ValueChangeEvent vce) {
        ProjectEnsayo p = (ProjectEnsayo) vce.getNewValue();
        p.setNotaSalida(notaSalida);
        FacesUtils.renderResponse();
    }

    public List<ProjectEnsayo> getAllMyProjectEnsayos() {
        ProjectEnsayoDAO projectEnsayoDAO = ProjectEnsayoDAO.getDefault();
        Set<ProjectEnsayo> resul = new HashSet<ProjectEnsayo>();
        ProjectEnsayoSearch projectEnsayoSearch = new ProjectEnsayoSearch();
        if (this.selectedProject != null) {
            projectEnsayoSearch.setProject(this.selectedProject);
            projectEnsayoSearch.setNotaSalida(null);
            HibernateUtil.currentSession().setFlushMode(org.hibernate.FlushMode.MANUAL);
            for (ProjectEnsayo projectEnsayo : projectEnsayoDAO.search(projectEnsayoSearch, null)) {
                if (projectEnsayo.getProject().getAlbaran() == null)
                    resul.add(projectEnsayo);
            }
            HibernateUtil.currentSession().setFlushMode(org.hibernate.FlushMode.AUTO);
        }
        projectEnsayoSearch.unsetProject();
        if (notaSalida.getId() != null) {
            projectEnsayoSearch.setNotaSalida(notaSalida);
            for (ProjectEnsayo projectEnsayo : projectEnsayoDAO.search(projectEnsayoSearch, null)) {
                resul.add(projectEnsayo);
            }
        }
        //ya tengo los ProjectEnsayo de la base de datos. Ahora voy a por getProjectEnsayos:
        if (notaSalida.getProjectEnsayos() == null) {
            notaSalida.setProjectEnsayos(new HashSet<ProjectEnsayo>());
        }
        for (ProjectEnsayo per : resul) {
            if (notaSalida.getProjectEnsayos().contains(per)) {
                per.setNotaSalida(notaSalida);
            } else {
                per.setNotaSalida(null);
            }
        }
        for (ProjectEnsayo pe : notaSalida.getProjectEnsayos()) {
            if (!resul.contains(pe)) {
                resul.add(pe);
            }
        }
        List<ProjectEnsayo> result = new ArrayList<ProjectEnsayo>(resul);
        Collections.sort(result, new comparaProyectEnsayos());
        return result;
    }

    public Date getUpdateDate() {
        return notaSalida.getUpdateDate();
    }

    public void setUpdateDate(Date updateDate) {
        notaSalida.setUpdateDate(updateDate);
    }

    public String getName() {
        return notaSalida.getName();
    }

    public void setName(String name) {
        notaSalida.setName(name);
    }

    public Date getFecha() {
        return notaSalida.getFecha();
    }

    public void setFecha(Date fecha) {
        notaSalida.setFecha(fecha);
    }

    public Integer getId() {
        return notaSalida.getId();
    }

    public Integer getOwnerId() {
        return notaSalida.getOwnerId();
    }

    public void setOwnerId(Integer ownerId) {
        notaSalida.setOwnerId(ownerId);
    }


    public String quitaProjectEnsayo() {
        UIData table = (UIData) FacesUtils.getComponent("notaSalida:projectEnsayos");
        ProjectEnsayo p = (ProjectEnsayo) table.getRowData();
        notaSalida.getProjectEnsayos().remove(p);
        p.setNotaSalida(null);
        if (!projects.contains(p.getProject()))
            projects.add(p.getProject());
        return null;
    }

    public String anadeProjectEnsayo() {
        UIData table = (UIData) FacesUtils.getComponent("notaSalida:projectEnsayos");
        ProjectEnsayo p = (ProjectEnsayo) table.getRowData();
        if (notaSalida.getProjectEnsayos() == null)
            notaSalida.setProjectEnsayos(new HashSet<ProjectEnsayo>());

        notaSalida.getProjectEnsayos().add(p);
        p.setNotaSalida(notaSalida);
        return null;
    }


    public String doBeforeSave() {
        return null;
    }

    public NotaSalida getNotaSalida() {
        return notaSalida;
    }

    public void setNotaSalida(NotaSalida notaSalida) {
        this.notaSalida = notaSalida;
    }

    public String detail_desde_fuera() {
        return "notaSalida_" + detail();
    }

    public Project getSelectedProject() {
        return selectedProject;
    }

    public void setSelectedProject(Project selectedProject) {
        this.selectedProject = selectedProject;
    }

    private Project selectedProject;

    public void onSelectedProjectChanged(ValueChangeEvent event) {
        setSelectedProject((Project) event.getNewValue());

        FacesUtils.renderResponse();
    }

    List<Project> projects;

    public List<SelectItem> getProjects() {
        if (projects == null) {
            ProjectManager projectManager = ProjectManager.getDefault();
            ProjectSearch projectSearch = new ProjectSearch();
            projectSearch.setEstado(ProjectEstado.PEND_ENV_LABORATORIO);
            projects = projectManager.getAllEntities(projectSearch, null);
            projectSearch.setEstado(ProjectEstado.PARCIAL_NS);
            projects.addAll(projectManager.getAllEntities(projectSearch, null));
            Collections.sort(projects, new Comparator<Project>() {
                public int compare(Project o1, Project o2) {
                    return o1.getNameDescriptivo().compareTo(o2.getNameDescriptivo());
                }
            });
        }
        ArrayList<SelectItem> ret = new ArrayList<SelectItem>();
        for (Project ref : projects) {
            ret.add(new SelectItem(ref, ref.getNameDescriptivo()));
        }
        ret.add(0, new SelectItem(""));
        return ret;
    }

    /**
     * Get the list of all clients
     *
     * @return the list of all clients
     */
    public List<SelectItem> getClients() {
        HibernateUtil.currentSession().setFlushMode(org.hibernate.FlushMode.MANUAL);
        List<Organization> refs = OrganizationManager.getDefault().getAllEntities(null, new SortCriteria("name"));
        HibernateUtil.currentSession().setFlushMode(org.hibernate.FlushMode.AUTO);
        ArrayList<SelectItem> ret = new ArrayList<SelectItem>();
        for (Organization ref : refs) {
            ret.add(new SelectItem(ref, ref.getNameAcro()));
        }
        ret.add(0, new SelectItem(""));
        return ret;
    }
}
