/*
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 *	Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * 	This program is free software; you can redistribute it and/or
 * 	modify it under the terms of the GNU General Public License
 * 	as published by the Free Software Foundation; either version 2
 * 	of the License, or (at your option) any later version.
 *
 * 	This program is distributed in the hope that it will be useful,
 * 	but WITHOUT ANY WARRANTY; without even the implied warranty of
 * 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * 	GNU General Public License for more details.
 *
 * 	You should have received a copy of the GNU General Public License
 * 	along with this program; if not, write to the Free Software
 * 	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * 	Autentia Real Bussiness Solution S.L.
 * 	Tlf: +34 91 675 33 06, +34 655 99 11 72
 * 	Fax: +34 91 656 65 04
 * 	info@autentia.com
 */
package com.autentia.intra.bean.contacts;

import com.autentia.intra.bean.BaseBean;
import com.autentia.intra.bean.NavigationResults;
import com.autentia.intra.bean.util.SendMailBean;
import com.autentia.intra.bean.util.SendMailBeanEvent;
import com.autentia.intra.bean.util.SendMailBeanListener;
import com.autentia.intra.businessobject.Contact;
import com.autentia.intra.businessobject.Organization;
import com.autentia.intra.businessobject.User;
import com.autentia.intra.dao.SortCriteria;
import com.autentia.intra.dao.search.ContactSearch;
import com.autentia.intra.manager.contacts.ContactManager;
import com.autentia.intra.manager.contacts.OrganizationManager;
import com.autentia.intra.manager.security.AuthenticationManager;
import com.autentia.intra.manager.security.Permission;
import com.autentia.intra.upload.Uploader;
import com.autentia.intra.upload.UploaderFactory;
import com.autentia.intra.util.FacesUtils;
import com.autentia.intra.util.SpringUtils;
import org.acegisecurity.acls.domain.BasePermission;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.faces.component.UIComponent;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * UI bean for Contact objects.
 *
 * @author stajanov code generator
 */
public class ContactBean extends BaseBean implements SendMailBeanListener {
    /**
     * Serial version field
     */
    private static final long serialVersionUID = -1L;

    private static final String OUTCOME_NOTIFY = "notify";

    private static AuthenticationManager authManager = AuthenticationManager.getDefault();

    /**
     * Send e-mail message to contact to notify him about his inclussion in our
     * archive of contacts
     *
     * @return
     */
    public String sendMail() {
        User actualUser = authManager.getCurrentPrincipal().getUser();

        List<String> to = new ArrayList<String>();
        to.add(contact.getName() + " <" + contact.getEmail() + ">");

        SendMailBean sendMail = (SendMailBean) FacesUtils.getBean("sendMailBean");
        sendMail.setFrom(actualUser.getName() + " <" + actualUser.getEmail() + ">");
        sendMail.setTo(to);
        sendMail.setSubject(FacesUtils.formatMessage("editContact.sendMailSubject"));
        sendMail.setMessage(FacesUtils.formatMessage("editContact.sendMailMessage",
                contact.getName(),
                actualUser.getName()
        )
        );
        sendMail.addSendMailBeanListener(this);
        return OUTCOME_NOTIFY;
    }

    public void mailSent(SendMailBeanEvent e) {
        contact.setNotified(true);
        if (contact.getId() == null) {
            manager.insertEntity(contact);
        } else {
            manager.updateEntity(contact);
        }
    }

    public void mailDiscarded(SendMailBeanEvent e) {
    }

/* contact - generated by stajanov (do not edit/delete) */


    /**
     * Logger
     */
    private static final Log log = LogFactory.getLog(ContactBean.class);

    /**
     * Active search object
     */
    private ContactSearch search = new ContactSearch();

    /**
     * Manager
     */
    private static ContactManager manager = ContactManager.getDefault();

    /**
     * Upload service
     */
    private static final Uploader uploader = UploaderFactory.getInstance("contact");


    public Contact getContact() {
        return contact;
    }

    public void setContact(Contact contact) {
        this.contact = contact;
    }

    /**
     * Active Contact object
     */
    private Contact contact;

    /**
     * Default sort column
     */
    private String sortColumn = "name";

    /**
     * Default sort order
     */
    private boolean sortAscending = true;

    /**
     * Quick search letter for ABC pager control
     */
    private Character letter;

    /**
     * List contacts. Order depends on Faces parameter sort.
     *
     * @return the list of all contacts sorted by requested criterion
     */
    public List<Contact> getAll() {
        return manager.getAllEntities(search, new SortCriteria(sortColumn, sortAscending));
    }

    // Getters to list possible values of related entities


    /**
     * Get the list of all organizations
     *
     * @return the list of all organizations
     */
    public List<SelectItem> getOrganizations() {
        List<Organization> refs = OrganizationManager.getDefault().getAllEntities(null, new SortCriteria("name"));

        ArrayList<SelectItem> ret = new ArrayList<SelectItem>();
        for (Organization ref : refs) {
            ret.add(new SelectItem(ref, ref.getName() + (ref.getAcronimo() == null || ref.getAcronimo().equals("") ? "" : " (" + ref.getAcronimo() + ")")));
        }
        return ret;
    }

    // Getters to list possible values of enum fields

    // Methods to create/remove instances of one-to-many entities (slave entities)

    /**
     * Whether or not create button is available for user
     *
     * @return true if user can create objects of type Contact
     */
    public boolean isCreateAvailable() {
        return SpringUtils.isRolePermissionGranted(Permission.Entity_Create(Contact.class));
    }

    /**
     * Whether or not edit button is available for user
     *
     * @return true if user can edit current object
     */
    public boolean isEditAvailable() {
        return SpringUtils.isAclPermissionGranted(contact, BasePermission.WRITE);
    }

    /**
     * Whether or not delete button is available for user
     *
     * @return true if user can delete current object
     */
    public boolean isDeleteAvailable() {
        return (contact.getId() != null) &&
                SpringUtils.isAclPermissionGranted(contact, BasePermission.DELETE);
    }

    /**
     * Go to create page
     *
     * @return forward to CREATE page
     */
    public String create() {
        contact = new Contact();

        return NavigationResults.CREATE;
    }

    /**
     * Go to detail page
     *
     * @return forward to DETAIL page
     */
    public String detail() {
        Integer id = Integer.parseInt(FacesUtils.getRequestParameter("id"));
        contact = manager.getEntityById(id);

        return SpringUtils.isAclPermissionGranted(contact, BasePermission.WRITE)
                ? NavigationResults.EDIT
                : NavigationResults.DETAIL;
    }

    /**
     * Save bean and stay on it
     *
     * @return forward to list page
     */
    public String save() {

        doBeforeSave();

        if (contact.getId() == null) {
            manager.insertEntity(contact);
        } else {
            manager.updateEntity(contact);
        }

        // Calls an after save action
        String result = doAfterSave(NavigationResults.LIST);

        // Unselect object
        //contact = null;

        return null;
    }

    /**
     * Delete bean and go back to beans list
     *
     * @return forward to LIST page
     */
    public String delete() {
        manager.deleteEntity(contact);
        contact = null;
        return NavigationResults.LIST;
    }

    /**
     * Go back to beans list
     *
     * @return forward to LIST page
     */
    public String list() {
        return NavigationResults.LIST;
    }

    /**
     * Reset search criteria
     *
     * @return forward to LIST page
     */
    public String reset() {
        search.reset();
        return list();
    }

    /**
     * Go to search page
     *
     * @return forward to SEARCH page
     */
    public String search() {
        return NavigationResults.SEARCH;
    }

    /**
     * Check if we have an active object.
     *
     * @return true is an object is selected
     */
    public boolean isContactSelected() {
        return contact != null;
    }

    // Getters and setters to manipulate sorting
    public boolean isSortAscending() {
        return sortAscending;
    }

    public void setSortAscending(boolean sortAscending) {
        this.sortAscending = sortAscending;
    }

    public String getSortColumn() {
        return sortColumn;
    }

    public void setSortColumn(String sortColumn) {
        this.sortColumn = sortColumn;
    }

    // Getters and setters to handle search
    public ContactSearch getSearch() {
        return search;
    }


    public String getSearchName() {
        return search.getName();
    }

    public void setSearchName(String val) {
        if (search.isNameSet()) {
            search.setName(val);
        }
    }

    public boolean isSearchNameValid() {
        return search.isNameSet();
    }

    public void setSearchNameValid(boolean val) {
        if (val) {
            search.setName(search.getName());
        } else {
            search.unsetName();
        }
    }


    public String getSearchEmail() {
        return search.getEmail();
    }

    public void setSearchEmail(String val) {
        if (search.isEmailSet()) {
            search.setEmail(val);
        }
    }

    public boolean isSearchEmailValid() {
        return search.isEmailSet();
    }

    public void setSearchEmailValid(boolean val) {
        if (val) {
            search.setEmail(search.getEmail());
        } else {
            search.unsetEmail();
        }
    }


    public String getSearchPhone() {
        return search.getPhone();
    }

    public void setSearchPhone(String val) {
        if (search.isPhoneSet()) {
            search.setPhone(val);
        }
    }

    public boolean isSearchPhoneValid() {
        return search.isPhoneSet();
    }

    public void setSearchPhoneValid(boolean val) {
        if (val) {
            search.setPhone(search.getPhone());
        } else {
            search.unsetPhone();
        }
    }


    public String getSearchMobile() {
        return search.getMobile();
    }

    public void setSearchMobile(String val) {
        if (search.isMobileSet()) {
            search.setMobile(val);
        }
    }

    public boolean isSearchMobileValid() {
        return search.isMobileSet();
    }

    public void setSearchMobileValid(boolean val) {
        if (val) {
            search.setMobile(search.getMobile());
        } else {
            search.unsetMobile();
        }
    }


    public java.lang.Boolean getSearchNotified() {
        return search.getNotified();
    }

    public void setSearchNotified(java.lang.Boolean val) {
        if (search.isNotifiedSet()) {
            search.setNotified(val);
        }
    }

    public boolean isSearchNotifiedValid() {
        return search.isNotifiedSet();
    }

    public void setSearchNotifiedValid(boolean val) {
        if (val) {
            search.setNotified(search.getNotified());
        } else {
            search.unsetNotified();
        }
    }


    public String getSearchPosition() {
        return search.getPosition();
    }

    public void setSearchPosition(String val) {
        if (search.isPositionSet()) {
            search.setPosition(val);
        }
    }

    public boolean isSearchPositionValid() {
        return search.isPositionSet();
    }

    public void setSearchPositionValid(boolean val) {
        if (val) {
            search.setPosition(search.getPosition());
        } else {
            search.unsetPosition();
        }
    }


    public Integer getSearchOwnerId() {
        return search.getOwnerId();
    }

    public void setSearchOwnerId(Integer val) {
        if (search.isOwnerIdSet()) {
            search.setOwnerId(val);
        }
    }

    public boolean isSearchOwnerIdValid() {
        return search.isOwnerIdSet();
    }

    public void setSearchOwnerIdValid(boolean val) {
        if (val) {
            search.setOwnerId(search.getOwnerId());
        } else {
            search.unsetOwnerId();
        }
    }


    public Integer getSearchDepartmentId() {
        return search.getDepartmentId();
    }

    public void setSearchDepartmentId(Integer val) {
        if (search.isDepartmentIdSet()) {
            search.setDepartmentId(val);
        }
    }

    public boolean isSearchDepartmentIdValid() {
        return search.isDepartmentIdSet();
    }

    public void setSearchDepartmentIdValid(boolean val) {
        if (val) {
            search.setDepartmentId(search.getDepartmentId());
        } else {
            search.unsetDepartmentId();
        }
    }


    public Date getSearchStartInsertDate() {
        return search.getStartInsertDate();
    }

    public void setSearchStartInsertDate(Date val) {
        if (val != null) {
            search.setStartInsertDate(val);
        } else {
            search.unsetStartInsertDate();
        }
    }

    public boolean isSearchStartInsertDateValid() {
        return search.isStartInsertDateSet();
    }

    public void setSearchStartInsertDateValid(boolean val) {
        if (val) {
            search.setStartInsertDate(search.getStartInsertDate());
        } else {
            search.unsetStartInsertDate();
        }
    }

    public Date getSearchEndInsertDate() {
        return search.getEndInsertDate();
    }

    public void setSearchEndInsertDate(Date val) {
        if (val != null) {
            search.setEndInsertDate(val);
        } else {
            search.unsetEndInsertDate();
        }
    }

    public boolean isSearchEndInsertDateValid() {
        return search.isEndInsertDateSet();
    }

    public void setSearchEndInsertDateValid(boolean val) {
        if (val) {
            search.setEndInsertDate(search.getEndInsertDate());
        } else {
            search.unsetEndInsertDate();
        }
    }


    public Date getSearchStartUpdateDate() {
        return search.getStartUpdateDate();
    }

    public void setSearchStartUpdateDate(Date val) {
        if (val != null) {
            search.setStartUpdateDate(val);
        } else {
            search.unsetStartUpdateDate();
        }
    }

    public boolean isSearchStartUpdateDateValid() {
        return search.isStartUpdateDateSet();
    }

    public void setSearchStartUpdateDateValid(boolean val) {
        if (val) {
            search.setStartUpdateDate(search.getStartUpdateDate());
        } else {
            search.unsetStartUpdateDate();
        }
    }

    public Date getSearchEndUpdateDate() {
        return search.getEndUpdateDate();
    }

    public void setSearchEndUpdateDate(Date val) {
        if (val != null) {
            search.setEndUpdateDate(val);
        } else {
            search.unsetEndUpdateDate();
        }
    }

    public boolean isSearchEndUpdateDateValid() {
        return search.isEndUpdateDateSet();
    }

    public void setSearchEndUpdateDateValid(boolean val) {
        if (val) {
            search.setEndUpdateDate(search.getEndUpdateDate());
        } else {
            search.unsetEndUpdateDate();
        }
    }


    public Organization getSearchOrganization() {
        return search.getOrganization();
    }

    public void setSearchOrganization(Organization val) {
        if (search.isOrganizationSet()) {
            search.setOrganization(val);
        }
    }

    public boolean isSearchOrganizationValid() {
        return search.isOrganizationSet();
    }

    public void setSearchOrganizationValid(boolean val) {
        if (val) {
            search.setOrganization(search.getOrganization());
        } else {
            search.unsetOrganization();
        }
    }

    /**
     * Handle an ABC pager letter click: filter objects by specified starting letter
     */
    public void letterClicked() {
        if (letter != null) {
            UIComponent comp = FacesUtils.getComponent("contacts:list");
            HtmlDataTable tabla = (HtmlDataTable) comp;
            tabla.setFirst(0);

            search.setName(letter + "%");
        } else {
            search.unsetName();
        }
    }

    public Character getLetter() {
        return letter;
    }

    public void setLetter(Character letter) {
        this.letter = letter;
    }

    // Getters and setters to handle uploads

    // Getters and setters to manipulate active Contact object

    public java.lang.Integer getId() {
        return contact.getId();
    }


    public String getName() {
        return contact.getName();
    }

    public void setName(String name) {
        contact.setName(name);
    }


    public String getEmail() {
        return contact.getEmail();
    }

    public void setEmail(String email) {
        contact.setEmail(email);
    }


    public String getPhone() {
        return contact.getPhone();
    }

    public void setPhone(String phone) {
        contact.setPhone(phone);
    }


    public String getMobile() {
        return contact.getMobile();
    }

    public void setMobile(String mobile) {
        contact.setMobile(mobile);
    }


    public boolean isNotified() {
        return contact.isNotified();
    }

    public void setNotified(boolean notified) {
        contact.setNotified(notified);
    }


    public String getPosition() {
        return contact.getPosition();
    }

    public void setPosition(String position) {
        contact.setPosition(position);
    }


    public Integer getOwnerId() {
        return contact.getOwnerId();
    }

    public void setOwnerId(Integer ownerId) {
        contact.setOwnerId(ownerId);
    }


    public Integer getDepartmentId() {
        return contact.getDepartmentId();
    }

    public void setDepartmentId(Integer departmentId) {
        contact.setDepartmentId(departmentId);
    }


    public Date getInsertDate() {
        return contact.getInsertDate();
    }

    public void setInsertDate(Date insertDate) {
        contact.setInsertDate(insertDate);
    }


    public Date getUpdateDate() {
        return contact.getUpdateDate();
    }

    public void setUpdateDate(Date updateDate) {
        contact.setUpdateDate(updateDate);
    }


    public Organization getOrganization() {
        return contact.getOrganization();
    }

    public void setOrganization(Organization organization) {
        contact.setOrganization(organization);
    }

/* contact - generated by stajanov (do not edit/delete) */

}
