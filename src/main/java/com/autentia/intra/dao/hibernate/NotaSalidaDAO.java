package com.autentia.intra.dao.hibernate;

import com.autentia.intra.businessobject.NotaSalida;
import com.autentia.intra.dao.DataAccException;
import com.autentia.intra.dao.IDataAccessObject;
import com.autentia.intra.dao.SearchCriteria;
import com.autentia.intra.dao.SortCriteria;
import com.autentia.intra.util.SpringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;


/**
 * DAO for NotaSalida objects.
 *
 * @author terrex
 */
public class NotaSalidaDAO extends HibernateManagerBase implements IDataAccessObject<NotaSalida> {
    private static final Log log = LogFactory.getLog(NotaSalidaDAO.class);

    /**
     * Get default NotaSalidaDAO as defined in Spring's configuration file.
     *
     * @return the default singleton NotaSalidaDAO
     */
    public static NotaSalidaDAO getDefault() {
        return (NotaSalidaDAO) SpringUtils.getSpringBean("daoNotaSalida");
    }

    /**
     * Constructor
     *
     * @deprecated do not construct DAOs alone: use Spring's declared beans
     */
    public NotaSalidaDAO() {
        super(false);
    }

    /**
     * Retrieve a NotaSalida object from database given its id
     *
     * @param id primary key of NotaSalida object
     * @return the NotaSalidaNotaSalida object identified by the id
     * @throws DataAccException on error
     */
    public NotaSalida getById(int id) throws DataAccException {
        return super.getByPk(NotaSalida.class, id);
    }

    /**
     * Get all NotaSalida objects from database sorted by the given criteria
     *
     * @param crit the sorting criteria
     * @return a list with all existing NotaSalida objects
     * @throws DataAccException on error
     */
    public List<NotaSalida> search(SortCriteria crit) throws DataAccException {
        return super.list(NotaSalida.class, crit);
    }

    /**
     * Get specified NotaSalida objects from database sorted by the given criteria
     *
     * @param search search criteria
     * @param sort   the sorting criteria
     * @return a list with NotaSalida objects matching the search criteria
     * @throws DataAccException on error
     */
    public List<NotaSalida> search(SearchCriteria search, SortCriteria sort) throws DataAccException {
        return super.search(NotaSalida.class, search, sort);
    }

    /**
     * Insert a new NotaSalida object in database
     *
     * @param dao the NotaSalida object to insert
     * @throws DataAccException on error
     */
    public void insert(NotaSalida dao) throws DataAccException {
        super.insert(dao);
    }

    /**
     * Update an existing NotaSalida object in database
     *
     * @param dao the NotaSalida object to update
     * @throws DataAccException on error
     */
    public void update(NotaSalida dao) throws DataAccException {
        super.update(dao, dao.getId());
    }

    /**
     * Delete an existing NotaSalida object in database
     *
     * @param dao the NotaSalida object to update
     * @throws DataAccException on error
     */
    public void delete(NotaSalida dao) throws DataAccException {
        super.delete(dao, dao.getId());
    }

/* NotaSalida - generated by stajanov (do not edit/delete) */

}
