package com.autentia.intra.manager.activity;

import com.autentia.intra.businessobject.Activity;
import com.autentia.intra.dao.SortCriteria;
import com.autentia.intra.dao.hibernate.ActivityDAO;
import com.autentia.intra.dao.search.ActivitySearch;
import com.autentia.intra.util.SpringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;

/* Activity - generated by stajanov (do not edit/delete) */


public class ActivityManager {


    /**
     * Logger
     */
    private static final Log log = LogFactory.getLog(ActivityManager.class);

    /**
     * Activity DAO *
     */
    private ActivityDAO activityDAO;

    /**
     * Get default ActivityManager as defined in Spring's configuration file.
     *
     * @return the default singleton ActivityManager
     */
    public static ActivityManager getDefault() {
        return (ActivityManager) SpringUtils.getSpringBean("managerActivity");
    }

    /**
     * Empty constructor needed by CGLIB (Spring AOP)
     */
    protected ActivityManager() {
    }

    /**
     * Default constructor
     *
     * @deprecated do not construct managers alone: use Spring's declared beans
     */
    public ActivityManager(ActivityDAO activityDAO) {
        this.activityDAO = activityDAO;
    }

    /**
     * List activitys.
     *
     * @param search search filter to apply
     * @param sort   sorting criteria
     * @return the list of all activitys sorted by requested criterion
     */
    public List<Activity> getAllEntities(ActivitySearch search, SortCriteria sort) {
        return activityDAO.search(search, sort);
    }

    /**
     * Get activity by primary key.
     *
     * @return activity selected by id.
     */
    public Activity getEntityById(int id) {
        return activityDAO.getById(id);
    }

    /**
     * Insert activity.
     */
    public void insertEntity(Activity activity) {
        activityDAO.insert(activity);
    }

    /**
     * Update activity.
     */
    public void updateEntity(Activity activity) {
        activityDAO.update(activity);
    }

    /**
     * Delete activity.
     */
    public void deleteEntity(Activity activity) {
        activityDAO.delete(activity);
    }

/* Activity - generated by stajanov (do not edit/delete) */
}