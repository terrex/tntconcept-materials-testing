/*
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 *	Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * 	This program is free software; you can redistribute it and/or
 * 	modify it under the terms of the GNU General Public License
 * 	as published by the Free Software Foundation; either version 2
 * 	of the License, or (at your option) any later version.
 *
 * 	This program is distributed in the hope that it will be useful,
 * 	but WITHOUT ANY WARRANTY; without even the implied warranty of
 * 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * 	GNU General Public License for more details.
 *
 * 	You should have received a copy of the GNU General Public License
 * 	along with this program; if not, write to the Free Software
 * 	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * 	Autentia Real Bussiness Solution S.L.
 * 	Tlf: +34 91 675 33 06, +34 655 99 11 72
 * 	Fax: +34 91 656 65 04
 * 	info@autentia.com
 */


package com.autentia.intra.manager.contacts;

import com.autentia.intra.businessobject.Organization;
import com.autentia.intra.businessobject.OrganizationType;
import com.autentia.intra.dao.SortCriteria;
import com.autentia.intra.dao.hibernate.OrganizationDAO;
import com.autentia.intra.dao.hibernate.OrganizationTypeDAO;
import com.autentia.intra.dao.search.OrganizationSearch;
import com.autentia.intra.util.ConfigurationUtil;
import com.autentia.intra.util.SpringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.ArrayList;
import java.util.List;


public class OrganizationManager {

/* Organization - generated by stajanov (do not edit/delete) */


    /**
     * Logger
     */
    private static final Log log = LogFactory.getLog(OrganizationManager.class);

    /**
     * Organization DAO *
     */
    private OrganizationDAO organizationDAO;

    /**
     * Get default OrganizationManager as defined in Spring's configuration file.
     *
     * @return the default singleton OrganizationManager
     */
    public static OrganizationManager getDefault() {
        return (OrganizationManager) SpringUtils.getSpringBean("managerOrganization");
    }

    /**
     * Empty constructor needed by CGLIB (Spring AOP)
     */
    protected OrganizationManager() {
    }

    /**
     * Default constructor
     *
     * @deprecated do not construct managers alone: use Spring's declared beans
     */
    public OrganizationManager(OrganizationDAO organizationDAO) {
        this.organizationDAO = organizationDAO;
    }

    /**
     * List organizations.
     *
     * @param search search filter to apply
     * @param sort   sorting criteria
     * @return the list of all organizations sorted by requested criterion
     */
    public List<Organization> getAllEntities(OrganizationSearch search, SortCriteria sort) {
        return organizationDAO.search(search, sort);
    }

    /**
     * Get organization by primary key.
     *
     * @return organization selected by id.
     */
    public Organization getEntityById(int id) {
        return organizationDAO.getById(id);
    }

    /**
     * Insert organization.
     */
    public void insertEntity(Organization organization) {
        organizationDAO.insert(organization);
    }

    /**
     * Update organization.
     */
    public void updateEntity(Organization organization) {
        organizationDAO.update(organization);
    }

    /**
     * Delete organization.
     */
    public void deleteEntity(Organization organization) {
        organizationDAO.delete(organization);
    }

/* Organization - generated by stajanov (do not edit/delete) */

    public Organization getMyOrganization() {
        return organizationDAO.getById(ConfigurationUtil.getDefault().getIdOurCompany());
    }


    public List<Organization> getProvidersAndClients() {
        OrganizationTypeDAO orgTypeDao = OrganizationTypeDAO.getDefault();

        OrganizationType provider = orgTypeDao.getById(ConfigurationUtil.getDefault().getOrganizationTypeProvider());
        OrganizationType providerCient = orgTypeDao.getById(ConfigurationUtil.getDefault().getOrganizationTypeProviderAndClient());

        List<Organization> lista = new ArrayList<Organization>();
        List<Organization> orgs = organizationDAO.searchByOrganizationTypes(new SortCriteria("name"), provider, providerCient);
        for (Organization org : orgs) {
            lista.add(org);
        }

        return lista;
    }


}
